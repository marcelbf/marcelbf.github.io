<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Marcelbf</title>
		<link>https://marcelbf.github.io/posts/</link>
		<description>Recent content in Posts on Marcelbf</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 03 May 2019 10:22:16 +1200</lastBuildDate>
		<atom:link href="https://marcelbf.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>How to create unit test</title>
			<link>https://marcelbf.github.io/posts/unit-test/</link>
			<pubDate>Fri, 03 May 2019 10:22:16 +1200</pubDate>
			
			<guid>https://marcelbf.github.io/posts/unit-test/</guid>
			<description>How to create a unit test for Dynamics AX Dynamics 365 for Finance and Operation (D365FO)?
There&amp;rsquo;s a simple pattern called AAA - Arrange, Act, Assert.
Arrange: Create the data and parameters you need to execute the code you want to test.
Act: Call the code you want to test.
Assert: Assert if the result is the expected.
I will show bellow how to create a unit test following this pattern and using SysTest framework.</description>
			<content type="html"><![CDATA[

<p>How to create a unit test for <s>Dynamics AX</s> Dynamics 365 for Finance and Operation (D365FO)?</p>

<p>There&rsquo;s a simple pattern called AAA - Arrange, Act, Assert.</p>

<p><b>Arrange:</b> Create the data and parameters you need to execute the code you want to test.</p>

<p><b>Act:</b> Call the code you want to test.</p>

<p><b>Assert:</b> Assert if the result is the expected.</p>

<p>I will show bellow how to create a unit test following this pattern and using SysTest framework.</p>

<h2 id="systest-framework">SysTest Framework</h2>

<p>In a nutshell:
- Any data you generate during the execution will not persist.
- Provide assertion methods.
- You can execute your tests in a build pipeline.</p>

<h2 id="example">Example</h2>

<p>You want to create a new method in the <i>CustTable</i> to verify if the customer is active. Customer will be active if:</p>

<ol>
<li>Has any sales orders in the last 2 months</li>
<li>Has any invoice in the last 2 months</li>
<li>Has any payment in the last 2 months</li>
</ol>

<p>Ignore the relevance, from business point of view, of the requirements. The important here is the approach.</p>

<p>Ok, first lets create the basic of our new method.</p>

<pre><code>/// &lt;summary&gt;
/// Extension of the table &lt;c&gt;CustTable&lt;/c&gt;.
/// &lt;/summary&gt;
[ExtensionOf(tableStr(CustTable))]
final class MFCustTable_Extension
{
    /// &lt;summary&gt;
    /// Returns if the customer is active.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;True if customer is active, false otherwise.&lt;/returns&gt;
    public boolean isActive()
    {        
        boolean ret;
       
        return ret;
        
    }

</code></pre>

<p>Notice, there&rsquo;s no logic yet. The point here is to be able to compile.
Now, let&rsquo;s create our tests.</p>

<ul>
<li>Create a separated model for your Unit Tests</li>
<li>Create a new class extending SysTestCase</li>
<li>Use the attribute <i>SysTestTargetAttribute</i> to identify the code you are testing</li>
<li></li>
</ul>

<pre><code>/// &lt;summary&gt;
/// Unit test for &lt;c&gt;MFCustTable_Extension&lt;/c&gt;
/// &lt;/summary&gt;
[SysTestTargetAttribute(classStr(MFCustTable_Extension_Test))]
class MFCustTable_Extension_Test extends SysTestCase
{
}
</code></pre>

<p>To create a test, create a new method public void with the name starting with test. You can also use the attribute <i>SysTestMethodAttribute</i> to indicate it is a test.</p>

<p>Use the attribute <i>SysTestGranularityAttribute</i> to indicate what type of test it is.</p>

<h3 id="first-test">First test:</h3>

<p>Given a customer with a sales order created within last 2 months, we expect when we call the method isActive() the method will return <b>true</b>.</p>

<p>Let&rsquo;s create the method first:</p>

<pre><code>    /// &lt;summary&gt;
    /// Given   A customer with a sales order created within last 2 months.
    /// When    Check if active
    /// Then    Is active
    /// &lt;/summary&gt;
    [SysTestMethodAttribute,
    SysTestGranularityAttribute(SysTestGranularity::Unit)]
    public void testCustomerActiveWithSalesOrder()
    {
        //arrange
        
        //act        
        
        //assert
        
    }
</code></pre>

<p>Now, in the arrange we need a customer, and a sales order.</p>

<p>In the act we have to call our new method.</p>

<p>In the assert, we user the method <i>assertTrue</i> to validate the return of our new method.</p>

<p>That&rsquo;s our first test complete</p>

<pre><code>/// &lt;summary&gt;
/// Unit test for &lt;c&gt;MFCustTable_Extension&lt;/c&gt;
/// &lt;/summary&gt;
[SysTestTargetAttribute(classStr(MFCustTable_Extension_Test))]
class MFCustTable_Extension_Test extends SysTestCase
{


    /// &lt;summary&gt;
    /// Given   A customer with a sales order created within last 2 months.
    /// When    Check if active
    /// Then    Is active
    /// &lt;/summary&gt;
    [SysTestMethodAttribute,
    SysTestGranularityAttribute(SysTestGranularity::Unit)]
    public void testCustomerActiveWithSalesOrder()
    {
        //arrange
        const str custAccount = '0001';        

        CustTable custTable = this.createCustomer(custAccount);
        this.createSalesTable(custAccount);                       

        //act        
        boolean ret = custTable.isActive();

        //assert
        this.assertTrue(ret, &quot;Customer should be active&quot;);
    }

    private CustTable createCustomer(AccountNum _accountNum)
    {
        CustTable custTable;
        custTable.AccountNum = _accountNum;
        custTable.doInsert();

        return custTable;
    }

    private SalesTable createSalesTable(AccountNum _custAccount)
    {
        SalesTable salesTable;       
        
        salesTable.CustAccount = _custAccount;       
        salesTable.doInsert();

        return salesTable;
    }
}
</code></pre>

<p>In visual studio, open the test explorer in the menu: <b>Test &gt; Windows &gt; Test explorer.</b>
Build your solution, and you should see your tests. Right click and select <i>Run selected tests</i>. Your test should fail.</p>

<p><img src="/img/test-explorer.png" alt="Test explorer" /></p>

<p>Notice, the string you use in the assert method is used to indicate what has failed. This can help to identify and give some context on what is not working.</p>

<p>Cool, we can implement our method now:</p>

<pre><code>/// &lt;summary&gt;
/// Extension of the table &lt;c&gt;CustTable&lt;/c&gt;.
/// &lt;/summary&gt;
[ExtensionOf(tableStr(CustTable))]
final class MFCustTable_Extension
{
    /// &lt;summary&gt;
    /// Returns if the customer is active.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;True if customer is active, false otherwise.&lt;/returns&gt;
    public boolean isActive()
    {                
        boolean ret;       
        utcdatetime dateFrom = DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -2);
        utcdatetime dateTo = DateTimeUtil::getSystemDateTime();

        ret = this.hasSalesOrder(dateFrom, dateTo);

        return ret;        
    }

    private boolean hasSalesOrder(utcdatetime _dateFrom, utcdatetime _dateTo)
    {
        SalesTable salesTable;
        boolean ret;        

        select firstonly RecId from salesTable
            where salesTable.custAccount == this.AccountNum
            &amp;&amp; salesTable.CreatedDateTime &gt;= _dateFrom
            &amp;&amp; salesTable.CreatedDateTime &lt;= _dateTo;

        if (salesTable.RecId)
        {
            ret = true;
        }

        return ret;
    }
</code></pre>

<p>If you build your solution and run your test it should pass now.</p>

<p>Bellow is the final example of all unit tests implemented:</p>

<pre><code>/// &lt;summary&gt;
/// Unit test for &lt;c&gt;MFCustTable_Extension&lt;/c&gt;
/// &lt;/summary&gt;
[SysTestTargetAttribute(classStr(MFCustTable_Extension_Test))]
class MFCustTable_Extension_Test extends SysTestCase
{


    /// &lt;summary&gt;
    /// Given   A customer with a sales order created within last 2 months.
    /// When    Check if active
    /// Then    Is active
    /// &lt;/summary&gt;
    [SysTestMethodAttribute,
    SysTestGranularityAttribute(SysTestGranularity::Unit)]
    public void testCustomerActiveWithSalesOrder()
    {
        //arrange
        const str custAccount = '0001';        

        CustTable custTable = this.createCustomer(custAccount);
        this.createSalesTable(custAccount);                       

        //act        
        boolean ret = custTable.MFisActive();

        //assert
        this.assertTrue(ret, &quot;Customer should be active&quot;);
    }

    /// &lt;summary&gt;
    /// Given   A customer with a sales order created before last 2 months.
    /// When    Check if active
    /// Then    Is not active
    /// &lt;/summary&gt;
    [SysTestMethodAttribute,
    SysTestGranularityAttribute(SysTestGranularity::Unit)]
    public void testCustomerNotActiveWithSalesOrder()
    {
        //arrange
        const str custAccount = '0001';

        CustTable custTable = this.createCustomer(custAccount);
        this.createSalesTable(custAccount, DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -3));

        //act
        boolean ret = custTable.MFisActive();

        //assert
        this.assertFalse(ret, &quot;Customer should not be active&quot;);
    }

    /// &lt;summary&gt;
    /// Given   A customer with a custInvoiceJour created within last 2 months.
    /// When    Check if active
    /// Then    Is active
    /// &lt;/summary&gt;
    [SysTestMethodAttribute,
    SysTestGranularityAttribute(SysTestGranularity::Unit)]
    public void testCustomerActiveWithInvoiceJour()
    {
        //arrange
        const str custAccount = '0001';

        CustTable custTable = this.createCustomer(custAccount);
        this.createCustInvoiceJour(custAccount);

        //act
        boolean ret = custTable.MFisActive();

        //assert
        this.assertTrue(ret, &quot;Customer should be active&quot;);
    }

    /// &lt;summary&gt;
    /// Given   A customer with a custInvoiceJour created before last 2 months.
    /// When    Check if active
    /// Then    Is active
    /// &lt;/summary&gt;
    [SysTestMethodAttribute,
    SysTestGranularityAttribute(SysTestGranularity::Unit)]
    public void testCustomerNotActiveWithInvoiceJour()
    {
        //arrange
        const str custAccount = '0001';

        CustTable custTable = this.createCustomer(custAccount);
        this.createCustInvoiceJour(custAccount, DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -3)));

        //act
        boolean ret = custTable.MFisActive();

        //assert
        this.assertFalse(ret, &quot;Customer should not be active&quot;);
    }

    /// &lt;summary&gt;
    /// Given   A customer with a settlement created within last 2 months.
    /// When    Check if active
    /// Then    Is active
    /// &lt;/summary&gt;
    [SysTestMethodAttribute,
    SysTestGranularityAttribute(SysTestGranularity::Unit)]
    public void testCustomerActiveWithSettlement()
    {
        //arrange
        const str custAccount = '0001';

        CustTable custTable = this.createCustomer(custAccount);
        this.createCustSettlement(custAccount);

        //act
        boolean ret = custTable.MFisActive();

        //assert
        this.assertTrue(ret, &quot;Customer should be active&quot;);
    }

    /// &lt;summary&gt;
    /// Given   A customer with a settlement created before last 2 months.
    /// When    Check if active
    /// Then    Is not active
    /// &lt;/summary&gt;
    [SysTestMethodAttribute,
    SysTestGranularityAttribute(SysTestGranularity::Unit)]
    public void testCustomerNotActiveWithSettlement()
    {
        //arrange
        const str custAccount = '0001';

        CustTable custTable = this.createCustomer(custAccount);
        this.createCustSettlement(custAccount, DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -3)));

        //act
        boolean ret = custTable.MFisActive();

        //assert
        this.assertFalse(ret, &quot;Customer should not be active&quot;);
    }

    private CustTable createCustomer(AccountNum _accountNum)
    {
        CustTable custTable;
        custTable.AccountNum = _accountNum;
        custTable.doInsert();

        return custTable;
    }

    private SalesTable createSalesTable(AccountNum _custAccount, utcdatetime _createdDateTime = DateTimeUtil::getSystemDateTime())
    {
        SalesTable salesTable;

        new OverwriteSystemfieldsPermission().assert();

        salesTable.overwriteSystemfields(true);
        salesTable.CustAccount = _custAccount;
        salesTable.(fieldNum(SalesTable, CreatedDateTime)) = _createdDateTime;

        salesTable.doInsert();

        return salesTable;
    }

    private CustInvoiceJour createCustInvoiceJour(AccountNum _invoiceAccount, InvoiceDate _invoiceDate = today())
    {
        CustInvoiceJour custInvoiceJour;

        custInvoiceJour.InvoiceAccount = _invoiceAccount;
        custInvoiceJour.InvoiceDate = _invoiceDate;
        custInvoiceJour.doInsert();

        return custInvoiceJour;
    }

    private CustSettlement createCustSettlement(AccountNum _custAccount, TransDate _transdate = today())
    {
        CustSettlement custSettlement;

        custSettlement.AccountNum = _custAccount;
        custSettlement.TransDate = _transdate;
        custSettlement.doInsert();

        return custSettlement;
    }

}
</code></pre>

<p>Final implementation of the Active method:</p>

<pre><code>/// &lt;summary&gt;
/// Extension of the table &lt;c&gt;CustTable&lt;/c&gt;.
/// &lt;/summary&gt;
[ExtensionOf(tableStr(CustTable))]
final class MFCustTable_Extension
{
    /// &lt;summary&gt;
    /// Returns if the customer is active.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;True if customer is active, false otherwise.&lt;/returns&gt;
    public boolean MFisActive()
    {        
        boolean ret;

        utcdatetime dateFrom = DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -2);
        utcdatetime dateTo = DateTimeUtil::getSystemDateTime();        
        

        ret = this.hasSalesOrder(dateFrom, dateTo);

        ret = ret || this.hasCustInvoiceJour(DateTimeUtil::date(dateFrom), DateTimeUtil::date(dateTo));
        
        ret = ret || this.hasSettlement(DateTimeUtil::date(dateFrom), DateTimeUtil::date(dateTo));

        return ret;
        
    }

    private boolean hasSalesOrder(utcdatetime _dateFrom, utcdatetime _dateTo)
    {
        SalesTable salesTable;
        boolean ret;        

        select firstonly RecId from salesTable
            where salesTable.custAccount == this.AccountNum
            &amp;&amp; salesTable.CreatedDateTime &gt;= _dateFrom
            &amp;&amp; salesTable.CreatedDateTime &lt;= _dateTo;

        if (salesTable.RecId)
        {
            ret = true;
        }

        return ret;
    }

    private boolean hasCustInvoiceJour(InvoiceDate _dateFrom, InvoiceDate _dateTo)
    {
        CustInvoiceJour custInvoiceJour;
        boolean ret;

        select firstonly RecId from custInvoiceJour
            where custInvoiceJour.InvoiceAccount == this.AccountNum
            &amp;&amp; custInvoiceJour.InvoiceDate &gt;= _dateFrom
            &amp;&amp; custInvoiceJour.InvoiceDate &lt;= _dateTo;

        if (custInvoiceJour.RecId)
        {
            ret = true;
        }

        return ret;
    }

    private boolean hasSettlement(TransDate _dateFrom, TransDate _dateTo)
    {
        CustSettlement custSettlement;
        boolean ret;

        select firstonly RecId from custSettlement
            where custSettlement.AccountNum == this.AccountNum
                &amp;&amp; custSettlement.TransDate &gt;= _dateFrom
                &amp;&amp; custSettlement.TransDate &lt;= _dateTo;        
        
        if (custSettlement.RecId)
        {
            ret = true;
        }

        return ret;
    }

}
</code></pre>

<p><img src="/img/test-explorer-passed.png" alt="Test passed" /></p>

<hr />

<h3 id="what-you-need-to-know">What you need to know?</h3>

<ul>
<li>Each test is unique and not dependent on any other test.</li>
<li>Keep it simple! Minimize the scope of your test. If you have to test multiple things break it in multiple tests.</li>
<li>Keep it readable! Choose meaningful names. Prioritize the readability, not reusability of the code.</li>
<li>A unit test will run in DAT company.</li>
<li>You can run in a different company using the attribute <i>SysTestCaseDataDependencyAttribute(&ldquo;DAT&rdquo;)</i> in the class (not in the method).</li>
<li>You can use the attribute <i>SysTestCaseNumSeqModuleDependency()</i> to generate number sequences (if you are running your test in a empty company.</li>
<li>If you check in your unit test model, your tests will be executed in your build.</li>
<li>Using a unit test to develop you don&rsquo;t need to open the browser all the time to test during development.</li>
<li>Writing your tests first helps you to think about the implementation you have to write and clarify requirements if needed.</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Testing</title>
			<link>https://marcelbf.github.io/posts/testing/</link>
			<pubDate>Mon, 15 Apr 2019 09:42:45 +1200</pubDate>
			
			<guid>https://marcelbf.github.io/posts/testing/</guid>
			<description>Testing automation There are several testing capabilities for Dynamics AX Dynamics 365 for Finance and Operations (D365FO). It is import to understand the value of automate testing and where to use which tool/technique.
You can&amp;rsquo;t avoid, at some point you will have to test your solution.
Ideally, after every change in your system you will have to test it again. If you have to go over the same process multiple times, why not automate to save some time and money ?</description>
			<content type="html"><![CDATA[

<h1 id="testing-automation">Testing automation</h1>

<p>There are several testing capabilities for <s>Dynamics AX</s> Dynamics 365 for Finance and Operations (D365FO). It is import to understand the value of automate testing and where to use which tool/technique.</p>

<p><b>You can&rsquo;t avoid, at some point you will have to test your solution.</b></p>

<p>Ideally, after every change in your system you will have to test it again. If you have to go over the same process multiple times, why not automate to save some time and money ?</p>

<h2 id="the-testing-pyramid">The testing pyramid</h2>

<p>Thinking about Return Of Investment (ROI), the ideal number of tests you have in your environment is:
<img src="/img/testpyramid.PNG" alt="The testing pyramid" /></p>

<p>Unit tests are very small and fast to run - that&rsquo;s why you want to have lots of these. Business cycle tests are slow to execute and hard to maintain.</p>

<hr />

<p><b>Unit test:</b> It validates if a unit of your X++ code behaves as expected.</p>

<p><b>Component test:</b> It validates if your component works as expected and met the functional requirements (of the component).</p>

<p><b>Integration test:</b> Validates the interactions between several components. Validates the functional requirements.</p>

<p><b>Business cycle test:</b> Validates end to end scenarios. Simulates a real user and validates the functional requirements.</p>

<hr />

<h2 id="the-rsat-tool">The RSAT tool</h2>

<p>Microsoft released a Regression Suite Automation Tool (RSAT). It is a great tool to automate some of your tests, but <b>be aware</b>, this should be used for Business cycle testing.</p>

<p><b>RSAT tool will simulate the user and perform all actions through the UI. It means it is slow to run.</b></p>

<p>If you have X++ customization in your D365 project you definitely should be doing unit, component and integration testing using SysTest, not only RSAT.</p>
]]></content>
		</item>
		
		<item>
			<title>Hello World</title>
			<link>https://marcelbf.github.io/posts/hello-world/</link>
			<pubDate>Wed, 03 Apr 2019 21:37:03 +1300</pubDate>
			
			<guid>https://marcelbf.github.io/posts/hello-world/</guid>
			<description>Hello world. This is my first post!
{ info(&amp;quot;Hello World!&amp;quot;); }  </description>
			<content type="html"><![CDATA[<p>Hello world.
This is my first post!</p>

<pre><code>{
  info(&quot;Hello World!&quot;);  
}
</code></pre>
]]></content>
		</item>
		
	</channel>
</rss>
